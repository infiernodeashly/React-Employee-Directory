{"version":3,"sources":["utils/DataAreaContext.js","components/DataBody.js","components/DataTable.js","components/SearchName.js","components/Nav.js","utils/API.js","components/DataArea.js","components/Main.js","components/Wrapper.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["DataAreaContext","React","createContext","DataBody","context","useContext","undefined","developerState","filteredUsers","name","map","login","picture","phone","email","dob","key","uuid","data-th","className","src","medium","alt","first","last","href","target","date","dateArray","split","year","join","formatDate","DataTable","id","headings","width","style","onClick","handleSort","SearchName","type","placeholder","aria-label","onChange","e","handleSearchName","Nav","data-toggle","data-target","aria-controls","aria-expanded","axios","get","DataArea","useState","users","order","setDeveloperState","useEffect","API","then","results","console","log","data","Provider","value","event","filter","filteredList","item","values","toLowerCase","indexOf","heading","currentOrder","elem","toString","sortedUsers","sort","a","b","localeCompare","age","updatedHeadings","length","Main","Wrapper","children","Header","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.55b8835b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst DataAreaContext = React.createContext({\r\n\r\n});\r\n\r\nexport default DataAreaContext;","import React, { useContext } from \"react\";\r\nimport \"../styles/index.css\";\r\nimport DataAreaContext from \"../utils/DataAreaContext\";\r\n\r\nconst DataBody = () => {\r\n  const context = useContext(DataAreaContext);\r\n\r\n  function formatDate(date) {\r\n    const dateArray = date.split(\"-\");\r\n    const year = dateArray[0];\r\n    const month = dateArray[1];\r\n    const dayArray = dateArray[2].split(\"T\");\r\n    const day = dayArray[0];\r\n    const formattedDate = [month, day, year].join(\"-\");\r\n    return formattedDate;\r\n  }\r\n\r\n  return (\r\n    <tbody>\r\n      {/* If the item is defined, it will be returned, filtered accordingly.  */}\r\n      {context.developerState.filteredUsers[0] !== undefined && context.developerState.filteredUsers[0].name !== undefined ? (\r\n        context.developerState.filteredUsers.map(({ login, name, picture, phone, email, dob }) => {\r\n          return (\r\n            <tr key={login.uuid}>\r\n              <td data-th=\"Image\" className=\"align-middle\">\r\n                <img\r\n                  src={picture.medium}\r\n                  alt={\"profile image for \" + name.first + \" \" + name.last}\r\n                  className=\"img-responsive\"\r\n                />\r\n              </td>\r\n              <td data-th=\"Name\" className=\"name-cell align-middle\">\r\n                {name.first} {name.last}\r\n              </td>\r\n              <td data-th=\"Phone\" className=\"align-middle\">\r\n                {phone}\r\n              </td>\r\n              <td data-th=\"Email\" className=\"align-middle\">\r\n                <a href={\"mailto:\" + email} target=\"__blank\">\r\n                  {email}\r\n                </a>\r\n              </td>\r\n              <td data-th=\"DOB\" className=\"align-middle\">\r\n                {formatDate(dob.date)}\r\n              </td>\r\n            </tr>\r\n          );\r\n        })\r\n      ) : (\r\n        <></>\r\n      )}\r\n    </tbody>\r\n  );\r\n}\r\n\r\nexport default DataBody;","import React, { useContext } from \"react\";\r\nimport DataBody from \"./DataBody\";\r\nimport \"../styles/index.css\";\r\nimport DataAreaContext from \"../utils/DataAreaContext\";\r\n\r\nconst DataTable = () => {\r\n  const context = useContext(DataAreaContext);\r\n\r\n  return (\r\n\r\n    <div className=\"datatable mt-5\">\r\n      <table\r\n        id=\"table\"\r\n        className=\"table table-striped table-hover table-condensed\"\r\n      >\r\n        <thead>\r\n          <tr>\r\n            {/* returns the mapped columns (mapped to heading names) with a sort button */}\r\n            {context.developerState.headings.map(({ name, width }) => {\r\n              return (\r\n                <th\r\n                  className=\"col\"\r\n                  key={name}\r\n                  style={{ width }}\r\n                  onClick={() => {\r\n                    context.handleSort(name);\r\n                  }}\r\n                >\r\n                  {/* pulls in the heading name and assigns it a sorting icon. */}\r\n                  {name}\r\n                  <span className=\"pointer\"></span>\r\n                </th>\r\n              );\r\n            })}\r\n          </tr>\r\n        </thead>\r\n\r\n        <DataBody />\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DataTable;","import React, { useContext } from \"react\";\r\nimport \"../styles/index.css\";\r\nimport DataAreaContext from \"../utils/DataAreaContext\";\r\n\r\nconst SearchName = () => {\r\n  const context = useContext(DataAreaContext);\r\n\r\n  return (\r\n    //develop searchbox by name to accompany button. \r\n    <div className=\"searchbox\">\r\n      <div className=\"input-group\">\r\n          <div className=\"input-group-prepend\">\r\n            <span className=\"input-group-text\" id=\"\">\r\n              Search\r\n            </span>\r\n          </div>\r\n          <input\r\n          className=\"form-control mr-sm-2\"\r\n          type=\"search\"\r\n          placeholder=\"first or last name\"\r\n          aria-label=\"Search\"\r\n          // Tie search by name function to searchbox. \r\n          onChange={e => context.handleSearchName(e)}\r\n        />\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\nexport default SearchName;","import React from \"react\";\r\nimport SearchName from \"./SearchName.js\";\r\n// import SearchDOB from \"./SearchDOB.js\";\r\nimport \"../styles/index.css\";\r\n\r\nfunction Nav() {\r\n  return (\r\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n      {/* creating search via name button */}\r\n      <button\r\n        className=\"navbar-toggler\"\r\n        type=\"button\"\r\n        data-toggle=\"collapse\"\r\n        data-target=\"#navbarNav\"\r\n        aria-controls=\"navbarNav\"\r\n        aria-expanded=\"false\"\r\n        aria-label=\"Toggle navigation\"\r\n      >\r\n        <span className=\"navbar-toggler-icon\" />\r\n      </button>\r\n      <div className=\"collapse navbar-collapse row\" id=\"navbarNav\">\r\n        <div className=\"search-area col-4\">\r\n          {/* pull in search via name box and function */}\r\n          <SearchName />\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nexport default Nav;","import axios from \"axios\";\r\n\r\nexport default {\r\n  // pull in all users to be sorted\r\n  getUsers: function() {\r\n\r\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\r\n  }\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport DataTable from \"./DataTable\";\r\nimport Nav from \"./Nav\";\r\nimport API from \"../utils/API\";\r\nimport \"../styles/index.css\";\r\nimport DataAreaContext from \"../utils/DataAreaContext\";\r\n\r\nconst DataArea = () => {\r\n  const [developerState, setDeveloperState] = useState({\r\n    users: [],\r\n    order: \"descend\",\r\n    filteredUsers: [],\r\n    headings: [\r\n      { name: \"Image\", width: \"10%\", order: \"descend\" },\r\n      { name: \"name\", width: \"10%\", order: \"descend\" },\r\n      { name: \"phone\", width: \"20%\", order: \"descend\" },\r\n      { name: \"email\", width: \"20%\", order: \"descend\" },\r\n      { name: \"dob\", width: \"10%\", order: \"descend\" }\r\n    ]\r\n  });\r\n\r\n  //handles the sorting of results\r\n  const handleSort = heading => {\r\n    let currentOrder = developerState.headings\r\n    //filters the results by the 'name' heading. \r\n      .filter(elem => elem.name === heading)\r\n      //then, it maps the results and returns them in descending order, in string form.\r\n      .map(elem => elem.order)\r\n      .toString();\r\n//if the current order is set to 'descend'\r\n    if (currentOrder === \"descend\") {\r\n      //switch the order to ascend when selected.\r\n      currentOrder = \"ascend\";\r\n      //otherwise, let the order remain set to 'descend'. \r\n    } else {\r\n      currentOrder = \"descend\";\r\n    }\r\n\r\n    //compares the order of each item in the list to other items to compare\r\n    //to eventually end up in the correct order when sorting. \r\n    const compareFnc = (a, b) => {\r\n      //if the order is set to 'ascend'\r\n      if (currentOrder === \"ascend\") {\r\n        // account for missing values\r\n        if (a[heading] === undefined) {\r\n          return 1;\r\n        } else if (b[heading] === undefined) {\r\n          return -1;\r\n        }\r\n        //else if sorting via ascending 'name' heading,\r\n        else if (heading === \"name\") {\r\n          //compare the first names of 2 items for ordering and return applicable items. \r\n          return a[heading].first.localeCompare(b[heading].first);\r\n          //else sort via ascending 'date of birth' heading\r\n        } else if (heading === \"dob\") {\r\n          return a[heading].age - b[heading].age;\r\n        } else {\r\n          return a[heading].localeCompare(b[heading]);\r\n        }\r\n      } else {\r\n        // account for missing values\r\n        if (a[heading] === undefined) {\r\n          return 1;\r\n        } else if (b[heading] === undefined) {\r\n          return -1;\r\n        }\r\n        //else if sorting via descending 'name' heading,\r\n        else if (heading === \"name\") {\r\n          return b[heading].first.localeCompare(a[heading].first);\r\n        }else if (heading === \"dob\") {\r\n          return b[heading].age - a[heading].age;\r\n        }  else {\r\n          return b[heading].localeCompare(a[heading]);\r\n        }\r\n      }\r\n    };\r\n    const sortedUsers = developerState.filteredUsers.sort(compareFnc);\r\n    //updating the headings data with pulled elements. \r\n    const updatedHeadings = developerState.headings.map(elem => {\r\n      elem.order = elem.name === heading ? currentOrder : elem.order;\r\n      return elem;\r\n    });\r\n\r\n    setDeveloperState({\r\n      ...developerState,\r\n      filteredUsers: sortedUsers,\r\n      headings: updatedHeadings\r\n    });\r\n  };\r\n//searching via name in search bar\r\n  const handleSearchName = event => {\r\n    const filter = event.target.value;\r\n    //generate list\r\n    const filteredList = developerState.users.filter(item => {\r\n      //filter via first and last name via input value\r\n      let values = item.name.first.toLowerCase() + \" \" + item.name.last.toLowerCase();\r\n      console.log(filter, values)\r\n      //if there are matching results, return the item. \r\n    if(values.indexOf(filter.toLowerCase()) !== -1){\r\n      return item\r\n    };\r\n    });\r\n//set the state as 'filtered' after performing the above filtering\r\n    setDeveloperState({ ...developerState, filteredUsers: filteredList });\r\n  };\r\n\r\n //pull in API data to populate heading names. \r\n  useEffect(() => {\r\n    API.getUsers().then(results => {\r\n      console.log(results.data.results);\r\n      setDeveloperState({\r\n        ...developerState,\r\n        users: results.data.results,\r\n        filteredUsers: results.data.results\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    //returns the state, returned search and sorting function.\r\n    <DataAreaContext.Provider\r\n      value={{ developerState, handleSearchName, handleSort }}\r\n    >\r\n      <Nav />\r\n      {/* as long as there are results, filter and return them. */}\r\n      <div className=\"data-area\">        \r\n        {developerState.filteredUsers.length > 0 ? <DataTable /> : <div></div>}\r\n      </div>\r\n    </DataAreaContext.Provider>\r\n  );\r\n};\r\n\r\nexport default DataArea;\r\n","import React from \"react\";\r\nimport DataArea from \"./DataArea\";\r\nimport \"../styles/index.css\";\r\n\r\nfunction Main () {\r\n    return (\r\n      <>\r\n        <DataArea />\r\n      </>\r\n    );\r\n  };\r\n\r\nexport default Main;","import React from 'react';\r\nimport \"../styles/index.css\";\r\n\r\nfunction Wrapper({ children }) {\r\n  return (\r\n      <div className=\"wrapper\">\r\n        { children }\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Wrapper;","import React from 'react';\r\nimport \"../styles/index.css\";\r\n\r\nfunction Header () {\r\n    return (\r\n      <div className=\"header\">\r\n        <h1>Employee Directory</h1>\r\n        <p>Click on carrots to filter. You can also use the search box to filter your results by first and last name.</p>\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Header;","import React from \"react\";\r\nimport Main from \"./components/Main\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Header from \"./components/Header\";\r\nimport \"./App.css\";\r\nfunction App() {\r\n  return ( <div className=\"App\"> <Wrapper> <Header /> <Main /> </Wrapper> </div>);\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}